
UNIT TEST 1
PASSED init count check for player 0 with count of 0.
PASSED init count check for player 1 with count of 0.
PASSED init count check for player 2 with count of 0.
PASSED init count check for player 3 with count of 0.
PASSED init count check for player 0 with count of -1.
PASSED init count check for player 1 with count of -1.
PASSED init count check for player 2 with count of -1.
PASSED init count check for player 3 with count of -1.

PASSED for player 0 for bin count and randomness check and nothing else changed for this player or other players.
PASSED for player 1 for bin count and randomness check and nothing else changed for this player or other players.
PASSED for player 2 for bin count and randomness check and nothing else changed for this player or other players.
PASSED for player 3 for bin count and randomness check and nothing else changed for this player or other players.

FAILED: returned a value of 0 which indicates the function completed but negative player index submitted.
Result before 0 result after 0
Result before 1 result after 1
Result before 2 result after 2
Result before 3 result after 3
Result before 4 result after 4
Result before 5 result after 5
Result before 6 result after 6
Result before 7 result after 7
Result before 8 result after 8
Result before 9 result after 9
FAILED: returned a value of 0 which indicates the function completed but negative player index submitted.
Result before 0 result after 0
Result before 1 result after 1
Result before 2 result after 2
Result before 3 result after 3
Result before 4 result after 4
Result before 5 result after 5
Result before 6 result after 6
Result before 7 result after 7
Result before 8 result after 8
Result before 9 result after 9
FAILED: returned a value of 0 which indicates the function completed but negative player index submitted.
Result before 0 result after 0
Result before 1 result after 1
Result before 2 result after 2
Result before 3 result after 3
Result before 4 result after 4
Result before 5 result after 5
Result before 6 result after 6
Result before 7 result after 7
Result before 8 result after 8
Result before 9 result after 9
FAILED: returned a value of 0 which indicates the function completed but negative player index submitted.
Result before 0 result after 0
Result before 1 result after 1
Result before 2 result after 2
Result before 3 result after 3
Result before 4 result after 4
Result before 5 result after 5
Result before 6 result after 6
Result before 7 result after 7
Result before 8 result after 8
Result before 9 result after 9
File 'dominion.c'
Lines executed:19.44% of 607
Branches executed:24.95% of 473
Taken at least once:19.03% of 473
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'


UNIT TEST 2.
Start of deck count check test.
PASSED deckCountTest for player = 0 with fullDeckCount = 4 and should be 4.
PASSED deckCountTest for player = 1 with fullDeckCount = 4 and should be 4.
PASSED deckCountTest for player = 2 with fullDeckCount = 4 and should be 4.
PASSED deckCountTest for player = 3 with fullDeckCount = 4 and should be 4.
PASSED deck count check test.

Start of hand count check test.
PASSED handCountTest for player = 0 with fullDeckCount = 4 and should be 4.
PASSED handCountTest for player = 1 with fullDeckCount = 4 and should be 4.
PASSED handCountTest for player = 2 with fullDeckCount = 4 and should be 4.
PASSED handCountTest for player = 3 with fullDeckCount = 4 and should be 4.
PASSED hand count check test.

Start of discard count check test.
PASSED discardCountTestCountTest for player = 0 with fullDeckCount = 4 and should be 4.
PASSED discardCountTestCountTest for player = 1 with fullDeckCount = 4 and should be 4.
PASSED discardCountTestCountTest for player = 2 with fullDeckCount = 4 and should be 4.
PASSED discardCountTestCountTest for player = 3 with fullDeckCount = 4 and should be 4.
PASSED discard count check test.

Start of ALL count check test.
PASSED allCountTestCountTest for player = 0 with fullDeckCount = 12 and should be 12 and other changed 1000.
PASSED allCountTestCountTest for player = 1 with fullDeckCount = 12 and should be 12 and other changed 1000.
PASSED allCountTestCountTest for player = 2 with fullDeckCount = 12 and should be 12 and other changed 1000.
PASSED allCountTestCountTest for player = 3 with fullDeckCount = 12 and should be 12 and other changed 1000.
PASSED overall count check test.

File 'dominion.c'
Lines executed:21.09% of 607
Branches executed:27.91% of 473
Taken at least once:21.99% of 473
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'


UNIT TEST 3
PASSED province test with correct return equal to 1.
PASSED province test with correct return equal to 0.
PASSED province test as the FUT DID NOT mutate the gameState.

FAILED countTest with zeroCounter 3 and isGameOver 0
Card 0 count 22
Card 1 count 22
Card 2 count 22
Card 3 count 23
Card 4 count 22
Card 5 count 22
Card 6 count 22
Card 7 count 22
Card 8 count 22
Card 9 count 22
Card 10 count 22
Card 11 count 22
Card 12 count 22
Card 13 count 22
Card 14 count 22
Card 15 count 22
Card 16 count 22
Card 17 count 22
Card 18 count 22
Card 19 count 22
Card 20 count 22
Card 21 count 22
Card 22 count 22
Card 23 count 22
Card 24 count 0
Card 25 count 0
Card 26 count 0
PASSED count test as the FUT DID NOT mutate the gameState.
File 'dominion.c'
Lines executed:22.57% of 607
Branches executed:29.60% of 473
Taken at least once:23.47% of 473
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'


UNIT TEST 4
PASSED: negative hand count for hand size of -3 and player 0 with sum of 22 and bonus 22 and function result 22.
PASSED: negative hand count for hand size of -3 and player 1 with sum of 22 and bonus 22 and function result 22.
PASSED: negative hand count for hand size of -3 and player 2 with sum of 22 and bonus 22 and function result 22.
PASSED: negative hand count for hand size of -3 and player 3 with sum of 22 and bonus 22 and function result 22.

Alert: negative coin count being returned. Verify your Dominion rule book to make sure this is allowed.
PASSED: negative hand count for hand size of 6 and player 0 with sum of -39 and bonus -45 and function result -39.
Alert: negative coin count being returned. Verify your Dominion rule book to make sure this is allowed.
PASSED: negative hand count for hand size of 6 and player 1 with sum of -39 and bonus -45 and function result -39.
Alert: negative coin count being returned. Verify your Dominion rule book to make sure this is allowed.
PASSED: negative hand count for hand size of 6 and player 2 with sum of -39 and bonus -45 and function result -39.
Alert: negative coin count being returned. Verify your Dominion rule book to make sure this is allowed.
PASSED: negative hand count for hand size of 6 and player 3 with sum of -39 and bonus -45 and function result -39.

PASSED: negative hand count for hand size of 3 and player 0 with sum of 7 and bonus 1 and function result 7.
PASSED: mutation check in basicCountTest.
PASSED: negative hand count for hand size of 3 and player 1 with sum of 7 and bonus 1 and function result 7.
PASSED: mutation check in basicCountTest.
PASSED: negative hand count for hand size of 3 and player 2 with sum of 7 and bonus 1 and function result 7.
PASSED: mutation check in basicCountTest.
PASSED: negative hand count for hand size of 3 and player 3 with sum of 7 and bonus 1 and function result 7.
PASSED: mutation check in basicCountTest.
File 'dominion.c'
Lines executed:22.90% of 607
Branches executed:29.60% of 473
Taken at least once:23.89% of 473
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'


CARD TEST 1 = SMITHY
PASSED player 0 for smithy removal.
FAILED player 0 for hand count.
FAILED player 0 for deck count.
PASSED player 0 for state mutated.
PASSED player 1 for smithy removal.
FAILED player 1 for hand count.
FAILED player 1 for deck count.
PASSED player 1 for state mutated.
PASSED player 2 for smithy removal.
FAILED player 2 for hand count.
FAILED player 2 for deck count.
PASSED player 2 for state mutated.
PASSED player 3 for smithy removal.
FAILED player 3 for hand count.
FAILED player 3 for deck count.
PASSED player 3 for state mutated.
File 'dominion.c'
Lines executed:25.70% of 607
Branches executed:31.29% of 473
Taken at least once:24.95% of 473
Calls executed:9.47% of 95
Creating 'dominion.c.gcov'


CARD TEST 2 = ADVENTURER
FAILED: player 0 handcount incorrectly equal to 9.
PASSED: player 0 discard count test.
PASSED: player 0 mutate count test.
FAILED: player 1 handcount incorrectly equal to 9.
PASSED: player 1 discard count test.
PASSED: player 1 mutate count test.
FAILED: player 2 handcount incorrectly equal to 9.
PASSED: player 2 discard count test.
PASSED: player 2 mutate count test.
FAILED: player 3 handcount incorrectly equal to 9.
PASSED: player 3 discard count test.
PASSED: player 3 mutate count test.
FAILED: player 0 did not havea an adventurer and still performed function and card adds.
FAILED: player 1 did not havea an adventurer and still performed function and card adds.
FAILED: player 2 did not havea an adventurer and still performed function and card adds.
FAILED: player 3 did not havea an adventurer and still performed function and card adds.
PASSED: player 0 bad player and function did not execute which is correct.
PASSED: player 1 bad player and function did not execute which is correct.
PASSED: player 2 bad player and function did not execute which is correct.
PASSED: player 3 bad player and function did not execute which is correct.
File 'dominion.c'
Lines executed:29.16% of 607
Branches executed:34.25% of 473
Taken at least once:27.06% of 473
Calls executed:12.63% of 95
Creating 'dominion.c.gcov'


CARD TEST 3 = VILLAGE
PASSED: player 0 action count tested correctly equal to 5.
FAILED: player 0 the village card is still in hand.
FAILED: player 0 the discardCount is off.
FAILED: player 0 mutate test with value -11.
PASSED: player 1 action count tested correctly equal to 5.
FAILED: player 1 the village card is still in hand.
FAILED: player 1 the discardCount is off.
FAILED: player 1 mutate test with value -11.
PASSED: player 2 action count tested correctly equal to 5.
PASSED: player 2 the village card is gone from hand as it should be and have a new card.
FAILED: player 2 the discardCount is off.
PASSED: player 2 mutate count test.
PASSED: player 3 action count tested correctly equal to 5.
FAILED: player 3 the village card is still in hand.
FAILED: player 3 the discardCount is off.
FAILED: player 3 mutate test with value -11.
File 'dominion.c'
Lines executed:30.31% of 607
Branches executed:34.67% of 473
Taken at least once:27.70% of 473
Calls executed:14.74% of 95
Creating 'dominion.c.gcov'


CARD TEST 4 = MINE
PASSED: player 0 correctly bounced for not choosing copper, silver or gold to trash.
PASSED: player 1 correctly bounced for not choosing copper, silver or gold to trash.
PASSED: player 2 correctly bounced for not choosing copper, silver or gold to trash.
PASSED: player 3 correctly bounced for not choosing copper, silver or gold to trash.
PASSED: player 0 correctly bounced for choosing an invalid card for replacement card.
PASSED: player 1 correctly bounced for choosing an invalid card for replacement card.
PASSED: player 2 correctly bounced for choosing an invalid card for replacement card.
PASSED: player 3 correctly bounced for choosing an invalid card for replacement card.
FAILED: player 0 did not bounce when replacement card had more than 3 cost of trashed card.
FAILED: player 1 did not bounce when replacement card had more than 3 cost of trashed card.
FAILED: player 2 did not bounce when replacement card had more than 3 cost of trashed card.
FAILED: player 3 did not bounce when replacement card had more than 3 cost of trashed card.
FAILED: player 0 new card NOT inserted into hand.
PASSED: player 0 got rid of the mine.
FAILED: player 0 discard count is incorrect before 5 and after 5.
PASSED: player 0 mutate count test.
FAILED: player 1 new card NOT inserted into hand.
PASSED: player 1 got rid of the mine.
FAILED: player 1 discard count is incorrect before 5 and after 5.
PASSED: player 1 mutate count test.
FAILED: player 2 new card NOT inserted into hand.
PASSED: player 2 got rid of the mine.
FAILED: player 2 discard count is incorrect before 5 and after 5.
PASSED: player 2 mutate count test.
FAILED: player 3 new card NOT inserted into hand.
PASSED: player 3 got rid of the mine.
FAILED: player 3 discard count is incorrect before 5 and after 5.
PASSED: player 3 mutate count test.
File 'dominion.c'
Lines executed:35.26% of 607
Branches executed:44.82% of 473
Taken at least once:30.87% of 473
Calls executed:21.05% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 2857 returned 100% blocks executed 100%
     2857:    8:int compare(const void* a, const void* b) {
     2857:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 5 (fallthrough)
branch  1 taken 2852
        5:   10:    return 1;
     2852:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 208 (fallthrough)
branch  1 taken 2644
      208:   12:    return -1;
     2644:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 9 returned 100% blocks executed 85%
        9:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        9:   44:  SelectStream(1);
call    0 returned 9
        9:   45:  PutSeed((long)randomSeed);
call    0 returned 9
        -:   46:  
        -:   47:  //check number of players
        9:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 9 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 9
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        9:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       99:   57:  for (i = 0; i < 10; i++)
branch  0 taken 90
branch  1 taken 9 (fallthrough)
        -:   58:    {
      990:   59:      for (j = 0; j < 10; j++)
branch  0 taken 900
branch  1 taken 90 (fallthrough)
        -:   60:        {
      900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 810 (fallthrough)
branch  1 taken 90
branch  2 taken 0 (fallthrough)
branch  3 taken 810
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        9:   73:  if (numPlayers == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 9
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        9:   77:  else if (numPlayers == 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 9
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        9:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        9:   87:  if (numPlayers == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 9
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        9:   95:      state->supplyCount[estate] = 12;
        9:   96:      state->supplyCount[duchy] = 12;
        9:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        9:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  102:  state->supplyCount[silver] = 40;
        9:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      189:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 180
branch  1 taken 9 (fallthrough)
        -:  107:    {
     1485:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 1395
branch  1 taken 90 (fallthrough)
        -:  109:	{
     1395:  110:	  if (kingdomCards[j] == i)
branch  0 taken 90 (fallthrough)
branch  1 taken 1305
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       90:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 90
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       90:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       90:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1305:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:	//set player decks
       45:  138:	for (i = 0; i < numPlayers; i++)
branch  0 taken 36
branch  1 taken 9 (fallthrough)
        -:  139:	{
       36:  140:		state->deckCount[i] = 0;
      144:  141:		for (j = 0; j < 3; j++)
branch  0 taken 108
branch  1 taken 36 (fallthrough)
        -:  142:		{
      108:  143:			state->deck[i][j] = estate;
      108:  144:			state->deckCount[i]++;
        -:  145:		}
      288:  146:		for (j = 3; j < 10; j++)
branch  0 taken 252
branch  1 taken 36 (fallthrough)
        -:  147:		{
      252:  148:			state->deck[i][j] = copper;
      252:  149:			state->deckCount[i]++;		
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
       45:  154:	for (i = 0; i < numPlayers; i++)
branch  0 taken 36
branch  1 taken 9 (fallthrough)
        -:  155:	{
       36:  156:		if ( shuffle(i, state) < 0 )
call    0 returned 36
branch  1 taken 0 (fallthrough)
branch  2 taken 36
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:  //draw player hands
       45:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 36
branch  1 taken 9 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       36:  166:      state->handCount[i] = 0;
       36:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      252:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 243
branch  1 taken 9 (fallthrough)
        -:  177:    {
      243:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        9:  182:  state->outpostPlayed = 0;
        9:  183:  state->phase = 0;
        9:  184:  state->numActions = 1;
        9:  185:  state->numBuys = 1;
        9:  186:  state->playedCardCount = 0;
        9:  187:  state->whoseTurn = 0;
        9:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       54:  192:  for (it = 0; it < 5; it++){
branch  0 taken 45
branch  1 taken 9 (fallthrough)
       45:  193:    drawCard(state->whoseTurn, state);
call    0 returned 45
        -:  194:  }
        -:  195:
        9:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 9
        -:  197:
        9:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 74 returned 100% blocks executed 100%
       74:  201:int shuffle(int player, struct gameState *state) 
        -:  202:{
        -:  203:	int newDeck[MAX_DECK];
       74:  204:	int newDeckPos = 0;
        -:  205:	int card;
        -:  206:	int i;
        -:  207:
       74:  208:	if (state->deckCount[player] < 1)
branch  0 taken 30 (fallthrough)
branch  1 taken 44
       30:  209:		return -1;
        -:  210:	
       44:  211:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 44
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1017:  214:	while (state->deckCount[player] > 0) 
branch  0 taken 929
branch  1 taken 44 (fallthrough)
        -:  215:	{
      929:  216:		card = floor(Random() * state->deckCount[player]);
call    0 returned 929
      929:  217:		newDeck[newDeckPos] = state->deck[player][card];
      929:  218:		newDeckPos++;
        -:  219:		
    63745:  220:		for (i = card; i < state->deckCount[player]-1; i++) 
branch  0 taken 62816
branch  1 taken 929 (fallthrough)
        -:  221:		{
    62816:  222:			state->deck[player][i] = state->deck[player][i+1];
        -:  223:		}
        -:  224:		
      929:  225:		state->deckCount[player]--;
        -:  226:	}
        -:  227:	
      973:  228:	for (i = 0; i < newDeckPos; i++) 
branch  0 taken 929
branch  1 taken 44 (fallthrough)
        -:  229:	{
      929:  230:		state->deck[player][i] = newDeck[i];
      929:  231:		state->deckCount[player]++;
        -:  232:	}
        -:  233:	
       44:  234:	return 0;
        -:  235:}
        -:  236:
function playCard called 0 returned 0% blocks executed 0%
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
call    0 never executed
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  319:}
        -:  320:
function handCard called 0 returned 0% blocks executed 0%
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
function supplyCount called 8 returned 100% blocks executed 100%
        8:  326:int supplyCount(int card, struct gameState *state) {
        8:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
function fullDeckCount called 32 returned 100% blocks executed 100%
       32:  330:int fullDeckCount(int player, int card, struct gameState *state) 
        -:  331:{
        -:  332:	int i;
       32:  333:	int count = 0;
        -:  334:
      192:  335:	for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 160
branch  1 taken 32 (fallthrough)
        -:  336:	{
      160:  337:		if (state->deck[player][i] == card) count++;
branch  0 taken 64 (fallthrough)
branch  1 taken 96
        -:  338:	}
        -:  339:	//printf("%d deck\n", count);
        -:  340:
      432:  341:	for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 400
branch  1 taken 32 (fallthrough)
        -:  342:	{
      400:  343:		if (state->hand[player][i] == card) count++;
branch  0 taken 64 (fallthrough)
branch  1 taken 336
        -:  344:	}
        -:  345:	//printf("%d hand\n", count);
        -:  346:	
      272:  347:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 240
branch  1 taken 32 (fallthrough)
        -:  348:	{
      240:  349:		if (state->discard[player][i] == card) count++;
branch  0 taken 64 (fallthrough)
branch  1 taken 176
        -:  350:	}
        -:  351:	// printf("%d discard\n", count);
        -:  352:	
       32:  353:	return count;
        -:  354:}
        -:  355:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  356:int whoseTurn(struct gameState *state) {
    #####:  357:  return state->whoseTurn;
        -:  358:}
        -:  359:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  360:int endTurn(struct gameState *state) 
        -:  361:{
        -:  362:	int k;
        -:  363:	int i;
    #####:  364:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  365:
        -:  366:	// Discard hand
    #####:  367:	for(i = 0; i < state -> handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  368:	{
    #####:  369:		state -> discard[currentPlayer][state -> discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  370:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  371:	}
    #####:  372:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  373:
        -:  374:	//Code for determining the player
    #####:  375:	if (currentPlayer < (state->numPlayers - 1))
branch  0 never executed
branch  1 never executed
        -:  376:	{ 
    #####:  377:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  378:	}
        -:  379:	else
        -:  380:	{
    #####:  381:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  382:	}
        -:  383:
    #####:  384:	state->outpostPlayed = 0;
    #####:  385:	state->phase = 0;
    #####:  386:	state->numActions = 1;
    #####:  387:	state->coins = 0;
    #####:  388:	state->numBuys = 1;
    #####:  389:	state->playedCardCount = 0;
    #####:  390:	state->handCount[state->whoseTurn] = 0;
        -:  391:
        -:  392:	//int k; move to top
        -:  393:	//Next player draws hand
    #####:  394:	for (k = 0; k < 5; k++)
branch  0 never executed
branch  1 never executed
        -:  395:	{
    #####:  396:		drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  397:	}
        -:  398:
        -:  399:	//Update money
    #####:  400:	updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  401:
    #####:  402:	return 0;
        -:  403:}
        -:  404:
function isGameOver called 4 returned 100% blocks executed 91%
        4:  405:int isGameOver(struct gameState *state) 
        -:  406:{
        -:  407:	int i;
        -:  408:	int j;
        -:  409:
        -:  410:	//if stack of Province cards is empty, the game ends
        4:  411:	if (state->supplyCount[province] == 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -:  412:	{
        1:  413:		return 1;
        -:  414:	}
        -:  415:
        -:  416:	// if three supply pile are at 0, the game ends
        3:  417:	j = 0;
       78:  418:	for (i = 0; i < 25; i++)
branch  0 taken 75
branch  1 taken 3 (fallthrough)
        -:  419:	{
       75:  420:		if (state->supplyCount[i] == 0)
branch  0 taken 2 (fallthrough)
branch  1 taken 73
        -:  421:		{
        2:  422:			j++;
        -:  423:		}
        -:  424:	}
        3:  425:	if ( j >= 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -:  426:	{
    #####:  427:		return 1;
        -:  428:	}
        -:  429:
        3:  430:	return 0;
        -:  431:}
        -:  432:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  433:int scoreFor (int player, struct gameState *state) {
        -:  434:
        -:  435:  int i;
    #####:  436:  int score = 0;
        -:  437:  //score from hand
    #####:  438:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  439:    {
    #####:  440:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  445:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  446:    }
        -:  447:
        -:  448:  //score from discard
    #####:  449:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  450:    {
    #####:  451:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  455:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  456:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  457:    }
        -:  458:
        -:  459:  //score from deck
    #####:  460:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  461:    {
    #####:  462:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  463:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  464:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  465:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  466:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  467:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  468:    }
        -:  469:
    #####:  470:  return score;
        -:  471:}
        -:  472:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  473:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  474:  int i;	
        -:  475:  int j;
        -:  476:  int highScore;
        -:  477:  int currentPlayer;
        -:  478:
        -:  479:  //get score for each player
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  481:    {
        -:  482:      //set unused player scores to -9999
    #####:  483:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  players[i] = -9999;
        -:  486:	}
        -:  487:      else
        -:  488:	{
    #####:  489:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  490:	}
        -:  491:    }
        -:  492:
        -:  493:  //find highest score
    #####:  494:  j = 0;
    #####:  495:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  496:    {
    #####:  497:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  498:	{
    #####:  499:	  j = i;
        -:  500:	}
        -:  501:    }
    #####:  502:  highScore = players[j];
        -:  503:
        -:  504:  //add 1 to players who had less turns
    #####:  505:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  507:    {
    #####:  508:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  509:	{
    #####:  510:	  players[i]++;
        -:  511:	}
        -:  512:    }
        -:  513:
        -:  514:  //find new highest score
    #####:  515:  j = 0;
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  517:    {
    #####:  518:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  519:	{
    #####:  520:	  j = i;
        -:  521:	}
        -:  522:    }
    #####:  523:  highScore = players[j];
        -:  524:
        -:  525:  //set winners in array to 1 and rest to 0
    #####:  526:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  527:    {
    #####:  528:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  529:	{
    #####:  530:	  players[i] = 1;
        -:  531:	}
        -:  532:      else
        -:  533:	{
    #####:  534:	  players[i] = 0;
        -:  535:	}
        -:  536:    }
        -:  537:
    #####:  538:  return 0;
        -:  539:}
        -:  540:
function drawCard called 113 returned 100% blocks executed 85%
      113:  541:int drawCard(int player, struct gameState *state)
        -:  542:{	int count;
        -:  543:  int deckCounter;
      113:  544:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 11 (fallthrough)
branch  1 taken 102
        -:  545:    
        -:  546:    //Step 1 Shuffle the discard pile back into a deck
        -:  547:    int i;
        -:  548:    //Move discard to deck
       11:  549:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0
branch  1 taken 11 (fallthrough)
    #####:  550:      state->deck[player][i] = state->discard[player][i];
    #####:  551:      state->discard[player][i] = -1;
        -:  552:    }
        -:  553:
       11:  554:    state->deckCount[player] = state->discardCount[player];
       11:  555:    state->discardCount[player] = 0;//Reset discard
        -:  556:
        -:  557:    //Shufffle the deck
       11:  558:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 11
        -:  559:   
        -:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  562:    }
        -:  563:    
       11:  564:    state->discardCount[player] = 0;
        -:  565:
        -:  566:    //Step 2 Draw Card
       11:  567:    count = state->handCount[player];//Get current player's hand count
        -:  568:    
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:    
       11:  573:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  574:
       11:  575:    if (deckCounter == 0)
branch  0 taken 11 (fallthrough)
branch  1 taken 0
       11:  576:      return -1;
        -:  577:
    #####:  578:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  579:    state->deckCount[player]--;
    #####:  580:    state->handCount[player]++;//Increment hand count
        -:  581:  }
        -:  582:
        -:  583:  else{
      102:  584:    int count = state->handCount[player];//Get current hand count for player
        -:  585:    int deckCounter;
        -:  586:    if (DEBUG){//Debug statements
        -:  587:      printf("Current hand count: %d\n", count);
        -:  588:    }
        -:  589:
      102:  590:    deckCounter = state->deckCount[player];//Create holder for the deck count
      102:  591:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      102:  592:    state->deckCount[player]--;
      102:  593:    state->handCount[player]++;//Increment hand count
        -:  594:  }
        -:  595:
      102:  596:  return 0;
        -:  597:}
        -:  598:
function getCost called 16 returned 100% blocks executed 13%
       16:  599:int getCost(int cardNumber)
        -:  600:{
       16:  601:  switch( cardNumber ) 
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 8
branch  5 taken 0
branch  6 taken 8
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
branch 21 taken 0
branch 22 taken 0
branch 23 taken 0
branch 24 taken 0
branch 25 taken 0
branch 26 taken 0
branch 27 taken 0
        -:  602:    {
        -:  603:    case curse:
    #####:  604:      return 0;
        -:  605:    case estate:
    #####:  606:      return 2;
        -:  607:    case duchy:
    #####:  608:      return 5;
        -:  609:    case province:
    #####:  610:      return 8;
        -:  611:    case copper:
        8:  612:      return 0;
        -:  613:    case silver:
    #####:  614:      return 3;
        -:  615:    case gold:
        8:  616:      return 6;
        -:  617:    case adventurer:
    #####:  618:      return 6;
        -:  619:    case council_room:
    #####:  620:      return 5;
        -:  621:    case feast:
    #####:  622:      return 4;
        -:  623:    case gardens:
    #####:  624:      return 4;
        -:  625:    case mine:
    #####:  626:      return 5;
        -:  627:    case remodel:
    #####:  628:      return 4;
        -:  629:    case smithy:
    #####:  630:      return 4;
        -:  631:    case village:
    #####:  632:      return 3;
        -:  633:    case baron:
    #####:  634:      return 4;
        -:  635:    case great_hall:
    #####:  636:      return 3;
        -:  637:    case minion:
    #####:  638:      return 5;
        -:  639:    case steward:
    #####:  640:      return 3;
        -:  641:    case tribute:
    #####:  642:      return 5;
        -:  643:    case ambassador:
    #####:  644:      return 3;
        -:  645:    case cutpurse:
    #####:  646:      return 4;
        -:  647:    case embargo: 
    #####:  648:      return 2;
        -:  649:    case outpost:
    #####:  650:      return 5;
        -:  651:    case salvager:
    #####:  652:      return 4;
        -:  653:    case sea_hag:
    #####:  654:      return 4;
        -:  655:    case treasure_map:
    #####:  656:      return 4;
        -:  657:    }
        -:  658:	
    #####:  659:  return -1;
        -:  660:}
        -:  661:
function fAdventurer called 12 returned 100% blocks executed 80%
       12:  662:int fAdventurer(struct gameState *s, int cp)
        -:  663:{
       12:  664:	int drawntreasure = 0;
        -:  665:	int cardDrawn;
       12:  666:	int z = 0;// this is the counter for the temp hand
        -:  667:	int temphand[MAX_HAND];// moved above the if statement
        -:  668:	
        -:  669:	// BUG 1
        -:  670:	// while(drawntreasure < 2) // WAS
       72:  671:	while(drawntreasure < 4)
branch  0 taken 48
branch  1 taken 12 (fallthrough)
        -:  672:	{
        -:  673:		//if the deck is empty we need to shuffle discard and add to deck
       48:  674:		if (s -> deckCount[cp] < 1)
branch  0 taken 11 (fallthrough)
branch  1 taken 37
        -:  675:		{
       11:  676:			shuffle(cp, s);
call    0 returned 11
        -:  677:		}
       48:  678:		drawCard(cp, s);
call    0 returned 48
       48:  679:		cardDrawn = s -> hand[cp][s -> handCount[cp] - 1];//top card of hand is most recently drawn card.
       48:  680:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 48 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 48
branch  4 never executed
branch  5 never executed
       48:  681:			drawntreasure++;
        -:  682:		else
        -:  683:		{
    #####:  684:			temphand[z] = cardDrawn;
    #####:  685:			s -> handCount[cp]--; //this should just remove the top card (the most recently drawn one).
    #####:  686:			z++;
        -:  687:		}
        -:  688:	}
       24:  689:	while(z - 1 >= 0)
branch  0 taken 0
branch  1 taken 12 (fallthrough)
        -:  690:	{
    #####:  691:		s -> discard[cp][s -> discardCount[cp]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  692:		z = z - 1;
        -:  693:	}
        -:  694:
       12:  695:	return 0;
        -:  696:}
        -:  697:
function fMine called 16 returned 100% blocks executed 90%
       16:  698:int fMine(struct gameState *s, int cp, int c1, int c2, int hp)
        -:  699:{
        -:  700:	int i, j;
       16:  701:	i = j = 0;
        -:  702:	
       16:  703:	j = s -> hand[cp][c1];  //store card we will trash
        -:  704:
       16:  705:	if (s -> hand[cp][c1] < copper || s -> hand[cp][c1] > gold)
branch  0 taken 16 (fallthrough)
branch  1 taken 0
branch  2 taken 4 (fallthrough)
branch  3 taken 12
        -:  706:	{
        4:  707:		return -1;
        -:  708:	}
        -:  709:
       12:  710:	if (c2 > treasure_map || c2 < curse)
branch  0 taken 8 (fallthrough)
branch  1 taken 4
branch  2 taken 0 (fallthrough)
branch  3 taken 8
        -:  711:	{
        4:  712:		return -1;
        -:  713:	}
        -:  714:
        8:  715:	if ( (getCost(s -> hand[cp][c1]) + 3) > getCost(c2) )
call    0 returned 8
call    1 returned 8
branch  2 taken 0 (fallthrough)
branch  3 taken 8
        -:  716:	{
    #####:  717:		return -1;
        -:  718:	}
        -:  719:	
        -:  720:	// BUG 3	
        -:  721:	// gainCard(c2, s, 2, cp); // WAS
        8:  722:	gainCard(c1, s, 2, cp); // IS 
call    0 returned 8
        -:  723:
        -:  724:	//discard card from hand
        8:  725:	discardCard(hp, cp, s, 0);
call    0 returned 8
        -:  726:
        -:  727:	//discard trashed card
        8:  728:	for (i = 0; i < s->handCount[cp]; i++)
branch  0 taken 8
branch  1 taken 0 (fallthrough)
        -:  729:	{
        8:  730:		if (s->hand[cp][i] == j)
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        -:  731:		{
        8:  732:			discardCard(i, cp, s, 0);			
call    0 returned 8
        8:  733:			break;
        -:  734:		}
        -:  735:	}
        -:  736:
        8:  737:	return 0;
        -:  738:}
        -:  739:
function fRemodel called 0 returned 0% blocks executed 0%
    #####:  740:int fRemodel(struct gameState *s, int cp, int c1, int c2, int hp)
        -:  741:{
        -:  742:	int i, j;
    #####:  743:	i = j = 0;
        -:  744:
    #####:  745:	j = s->hand[cp][c1];  //store card we will trash
        -:  746:
    #####:  747:	if ( (getCost(s->hand[cp][c1]) + 2) > getCost(c2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  748:	{
    #####:  749:		return -1;
        -:  750:	}
        -:  751:
    #####:  752:	gainCard(c2, s, 0, cp);
call    0 never executed
        -:  753:
        -:  754:	//discard card from hand
    #####:  755:	discardCard(hp, cp, s, 0);
call    0 never executed
        -:  756:
        -:  757:	//discard trashed card
    #####:  758:	for (i = 0; i < s->handCount[cp]; i++)
branch  0 never executed
branch  1 never executed
        -:  759:	{
    #####:  760:		if (s->hand[cp][i] == j)
branch  0 never executed
branch  1 never executed
        -:  761:		{
    #####:  762:			discardCard(i, cp, s, 0);			
call    0 never executed
    #####:  763:			break;
        -:  764:		}
        -:  765:	}
        -:  766:
    #####:  767:	return 0;
        -:  768:}
        -:  769:
        -:  770:// Smithy should get three more cards into hand and discard the smithy 
function fSmithy called 4 returned 100% blocks executed 100%
        4:  771:int fSmithy(struct gameState *s, int cp, int hp)
        -:  772:{
        4:  773:	int i = 0;
        -:  774:	
        -:  775:	//+3 Cards
        -:  776:	// Bug 2 
        -:  777:	// for (i = 0; i < 3; i++) // WAS
       20:  778:	for (i = 0; i < 4; i++) // IS 
branch  0 taken 16
branch  1 taken 4 (fallthrough)
        -:  779:	{
       16:  780:		drawCard(cp, s); // Correct line 
call    0 returned 16
        -:  781:	}
        -:  782:
        -:  783:	//discard card from hand
        4:  784:	discardCard(hp, cp, s, 0); // this is the correct line 
call    0 returned 4
        4:  785:	return 0;
        -:  786:}
        -:  787:
function fVillage called 4 returned 100% blocks executed 100%
        4:  788:int fVillage(struct gameState *s, int cp, int hp)
        -:  789:{
        4:  790:	drawCard(cp, s); 
call    0 returned 4
        -:  791:
        -:  792:	//+2 Actions
        4:  793:	s -> numActions = s -> numActions + 2;
        -:  794:	
        -:  795:	// BUG 4
        -:  796:	//discard played card from hand
        -:  797:	// discardCard(hp, cp, s, 0); // WAS
        4:  798:	discardCard(hp, hp, s, 0); // IS
call    0 returned 4
        4:  799:	return 0;
        -:  800:}
        -:  801:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  802:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  803:{
        -:  804:	int i;
        -:  805:	int j;
        -:  806:	int k;
        -:  807:	int x;
        -:  808:	int index;
    #####:  809:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  810:	int nextPlayer = currentPlayer + 1;
        -:  811:
    #####:  812:	int tributeRevealedCards[2] = {-1, -1};
        -:  813:	int temphand[MAX_HAND];// moved above the if statement
        -:  814:	// int drawntreasure=0;
        -:  815:	// int cardDrawn;
        -:  816:	// int z = 0;// this is the counter for the temp hand
        -:  817:	
    #####:  818:	if (nextPlayer > (state->numPlayers - 1))
branch  0 never executed
branch  1 never executed
        -:  819:	{
    #####:  820:		nextPlayer = 0;
        -:  821:	}
        -:  822:  
        -:  823:  //uses switch to select card and perform actions
    #####:  824:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  825:    {
        -:  826:    case adventurer:
    #####:  827:		return fAdventurer(state, currentPlayer);
call    0 never executed
        -:  828:			
        -:  829:    case council_room:
        -:  830:      //+4 Cards
    #####:  831:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  832:	{
    #####:  833:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  834:	}
        -:  835:			
        -:  836:      //+1 Buy
    #####:  837:      state->numBuys++;
        -:  838:			
        -:  839:      //Each other player draws a card
    #####:  840:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  841:	{
    #####:  842:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  843:	    {
    #####:  844:	      drawCard(i, state);
call    0 never executed
        -:  845:	    }
        -:  846:	}
        -:  847:			
        -:  848:      //put played card in played card pile
    #####:  849:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  850:			
    #####:  851:      return 0;
        -:  852:			
        -:  853:    case feast:
        -:  854:      //gain card with cost up to 5
        -:  855:      //Backup hand
    #####:  856:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  857:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  858:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  859:      }
        -:  860:      //Backup hand
        -:  861:
        -:  862:      //Update Coins for Buy
    #####:  863:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  864:      x = 1;//Condition to loop on
    #####:  865:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  866:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  867:	  if (DEBUG)
        -:  868:	    printf("None of that card left, sorry!\n");
        -:  869:
        -:  870:	  if (DEBUG){
        -:  871:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  872:	  }
        -:  873:	}
    #####:  874:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  875:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  876:
        -:  877:	  if (DEBUG){
        -:  878:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  879:	  }
        -:  880:	}
        -:  881:	else{
        -:  882:
        -:  883:	  if (DEBUG){
        -:  884:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  885:	  }
        -:  886:
    #####:  887:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  888:	  x = 0;//No more buying cards
        -:  889:
        -:  890:	  if (DEBUG){
        -:  891:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  892:	  }
        -:  893:
        -:  894:	}
        -:  895:      }     
        -:  896:
        -:  897:      //Reset Hand
    #####:  898:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  899:	state->hand[currentPlayer][i] = temphand[i];
    #####:  900:	temphand[i] = -1;
        -:  901:      }
        -:  902:      //Reset Hand
        -:  903:      			
    #####:  904:      return 0;
        -:  905:			
        -:  906:    case gardens:
    #####:  907:      return -1;
        -:  908:			
        -:  909:    case mine:
    #####:  910:		return fMine(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
        -:  911:		
        -:  912:    case remodel:
    #####:  913:		return fRemodel(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
        -:  914:		
        -:  915:    case smithy:
    #####:  916:		return fSmithy(state, currentPlayer, handPos);
call    0 never executed
        -:  917:		
        -:  918:    case village:
    #####:  919:		return fVillage(state, currentPlayer, handPos);
call    0 never executed
        -:  920:		
        -:  921:    case baron:
    #####:  922:      state->numBuys++;//Increase buys by 1!
    #####:  923:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  924:	int p = 0;//Iterator for hand!
    #####:  925:	int card_not_discarded = 1;//Flag for discard set!
    #####:  926:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  927:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  928:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  929:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  930:	    state->discardCount[currentPlayer]++;
    #####:  931:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  932:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  933:	    }
    #####:  934:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  935:	    state->handCount[currentPlayer]--;
    #####:  936:	    card_not_discarded = 0;//Exit the loop
        -:  937:	  }
    #####:  938:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  939:	    if(DEBUG) {
        -:  940:	      printf("No estate cards in your hand, invalid choice\n");
        -:  941:	      printf("Must gain an estate if there are any\n");
        -:  942:	    }
    #####:  943:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  944:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  945:	      state->supplyCount[estate]--;//Decrement estates
    #####:  946:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  947:		isGameOver(state);
call    0 never executed
        -:  948:	      }
        -:  949:	    }
    #####:  950:	    card_not_discarded = 0;//Exit the loop
        -:  951:	  }
        -:  952:			    
        -:  953:	  else{
    #####:  954:	    p++;//Next card
        -:  955:	  }
        -:  956:	}
        -:  957:      }
        -:  958:			    
        -:  959:      else{
    #####:  960:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  961:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  962:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  963:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  964:	    isGameOver(state);
call    0 never executed
        -:  965:	  }
        -:  966:	}
        -:  967:      }
        -:  968:	    
        -:  969:      
    #####:  970:      return 0;
        -:  971:		
        -:  972:    case great_hall:
        -:  973:      //+1 Card
    #####:  974:      drawCard(currentPlayer, state);
call    0 never executed
        -:  975:			
        -:  976:      //+1 Actions
    #####:  977:      state->numActions++;
        -:  978:			
        -:  979:      //discard card from hand
    #####:  980:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case minion:
        -:  984:      //+1 action
    #####:  985:      state->numActions++;
        -:  986:			
        -:  987:      //discard card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  989:			
    #####:  990:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  991:	{
    #####:  992:	  state->coins = state->coins + 2;
        -:  993:	}
        -:  994:			
    #####:  995:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  996:	{
        -:  997:	  //discard hand
    #####:  998:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  999:	    {
    #####: 1000:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1001:	    }
        -: 1002:				
        -: 1003:	  //draw 4
    #####: 1004:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1005:	    {
    #####: 1006:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1007:	    }
        -: 1008:				
        -: 1009:	  //other players discard hand and redraw if hand size > 4
    #####: 1010:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1011:	    {
    #####: 1012:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1013:		{
    #####: 1014:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1015:		    {
        -: 1016:		      //discard hand
    #####: 1017:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1018:			{
    #####: 1019:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1020:			}
        -: 1021:							
        -: 1022:		      //draw 4
    #####: 1023:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1024:			{
    #####: 1025:			  drawCard(i, state);
call    0 never executed
        -: 1026:			}
        -: 1027:		    }
        -: 1028:		}
        -: 1029:	    }
        -: 1030:				
        -: 1031:	}
    #####: 1032:      return 0;
        -: 1033:		
        -: 1034:    case steward:
    #####: 1035:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1036:	{
        -: 1037:	  //+2 cards
    #####: 1038:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1039:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1040:	}
    #####: 1041:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1042:	{
        -: 1043:	  //+2 coins
    #####: 1044:	  state->coins = state->coins + 2;
        -: 1045:	}
        -: 1046:      else
        -: 1047:	{
        -: 1048:	  //trash 2 cards in hand
    #####: 1049:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1050:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1051:	}
        -: 1052:			
        -: 1053:      //discard card from hand
    #####: 1054:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1055:      return 0;
        -: 1056:		
        -: 1057:    case tribute:
    #####: 1058:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1059:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1060:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1061:	  state->deckCount[nextPlayer]--;
        -: 1062:	}
    #####: 1063:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1064:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1065:	  state->discardCount[nextPlayer]--;
        -: 1066:	}
        -: 1067:	else{
        -: 1068:	  //No Card to Reveal
        -: 1069:	  if (DEBUG){
        -: 1070:	    printf("No cards to reveal\n");
        -: 1071:	  }
        -: 1072:	}
        -: 1073:      }
        -: 1074:	    
        -: 1075:      else{
    #####: 1076:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1077:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1078:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1079:	    state->deckCount[nextPlayer]++;
    #####: 1080:	    state->discard[nextPlayer][i] = -1;
    #####: 1081:	    state->discardCount[nextPlayer]--;
        -: 1082:	  }
        -: 1083:			    
    #####: 1084:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1085:	} 
    #####: 1086:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1087:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1088:	state->deckCount[nextPlayer]--;
    #####: 1089:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1090:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1091:	state->deckCount[nextPlayer]--;
        -: 1092:      }    
        -: 1093:		       
    #####: 1094:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1095:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1096:	state->playedCardCount++;
    #####: 1097:	tributeRevealedCards[1] = -1;
        -: 1098:      }
        -: 1099:
    #####: 1100:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1101:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1102:	  state->coins += 2;
        -: 1103:	}
        -: 1104:		    
    #####: 1105:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1106:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1107:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1108:	}
        -: 1109:	else{//Action Card
    #####: 1110:	  state->numActions = state->numActions + 2;
        -: 1111:	}
        -: 1112:      }
        -: 1113:	    
    #####: 1114:      return 0;
        -: 1115:		
        -: 1116:    case ambassador:
    #####: 1117:      j = 0;		//used to check if player has enough cards to discard
        -: 1118:
    #####: 1119:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1120:	{
    #####: 1121:	  return -1;				
        -: 1122:	}
        -: 1123:
    #####: 1124:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1125:	{
    #####: 1126:	  return -1;
        -: 1127:	}
        -: 1128:
    #####: 1129:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1130:	{
    #####: 1131:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1132:	    {
    #####: 1133:	      j++;
        -: 1134:	    }
        -: 1135:	}
    #####: 1136:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1137:	{
    #####: 1138:	  return -1;				
        -: 1139:	}
        -: 1140:
        -: 1141:      if (DEBUG) 
        -: 1142:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1143:
        -: 1144:      //increase supply count for choosen card by amount being discarded
    #####: 1145:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1146:			
        -: 1147:      //each other player gains a copy of revealed card
    #####: 1148:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1149:	{
    #####: 1150:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1151:	    {
    #####: 1152:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1153:	    }
        -: 1154:	}
        -: 1155:
        -: 1156:      //discard played card from hand
    #####: 1157:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1158:
        -: 1159:      //trash copies of cards returned to supply
    #####: 1160:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1161:	{
    #####: 1162:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1163:	    {
    #####: 1164:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1165:		{
    #####: 1166:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1167:		  break;
        -: 1168:		}
        -: 1169:	    }
        -: 1170:	}			
        -: 1171:
    #####: 1172:      return 0;
        -: 1173:		
        -: 1174:    case cutpurse:
        -: 1175:
    #####: 1176:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1177:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1178:	{
    #####: 1179:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1180:	    {
    #####: 1181:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1182:		{
    #####: 1183:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1184:		    {
    #####: 1185:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1186:		      break;
        -: 1187:		    }
    #####: 1188:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1189:		    {
    #####: 1190:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1191:			{
        -: 1192:			  if (DEBUG)
        -: 1193:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1194:			}	
    #####: 1195:		      break;
        -: 1196:		    }		
        -: 1197:		}
        -: 1198:					
        -: 1199:	    }
        -: 1200:				
        -: 1201:	}				
        -: 1202:
        -: 1203:      //discard played card from hand
    #####: 1204:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1205:
    #####: 1206:      return 0;
        -: 1207:
        -: 1208:		
        -: 1209:    case embargo: 
        -: 1210:      //+2 Coins
    #####: 1211:      state->coins = state->coins + 2;
        -: 1212:			
        -: 1213:      //see if selected pile is in play
    #####: 1214:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1215:	{
    #####: 1216:	  return -1;
        -: 1217:	}
        -: 1218:			
        -: 1219:      //add embargo token to selected supply pile
    #####: 1220:      state->embargoTokens[choice1]++;
        -: 1221:			
        -: 1222:      //trash card
    #####: 1223:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1224:      return 0;
        -: 1225:		
        -: 1226:    case outpost:
        -: 1227:      //set outpost flag
    #####: 1228:      state->outpostPlayed++;
        -: 1229:			
        -: 1230:      //discard card
    #####: 1231:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1232:      return 0;
        -: 1233:		
        -: 1234:    case salvager:
        -: 1235:      //+1 buy
    #####: 1236:      state->numBuys++;
        -: 1237:			
    #####: 1238:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1239:	{
        -: 1240:	  //gain coins equal to trashed card
    #####: 1241:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1242:	  //trash card
    #####: 1243:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1244:	}
        -: 1245:			
        -: 1246:      //discard card
    #####: 1247:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1248:      return 0;
        -: 1249:		
        -: 1250:    case sea_hag:
    #####: 1251:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1252:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1253:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1254:	  state->discardCount[i]++;
    #####: 1255:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1256:	}
        -: 1257:      }
    #####: 1258:      return 0;
        -: 1259:		
        -: 1260:    case treasure_map:
        -: 1261:      //search hand for another treasure_map
    #####: 1262:      index = -1;
    #####: 1263:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1264:	{
    #####: 1265:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1266:	    {
    #####: 1267:	      index = i;
    #####: 1268:	      break;
        -: 1269:	    }
        -: 1270:	}
    #####: 1271:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1272:	{
        -: 1273:	  //trash both treasure cards
    #####: 1274:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1275:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1276:
        -: 1277:	  //gain 4 Gold cards
    #####: 1278:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1279:	    {
    #####: 1280:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1281:	    }
        -: 1282:				
        -: 1283:	  //return success
    #####: 1284:	  return 1;
        -: 1285:	}
        -: 1286:			
        -: 1287:      //no second treasure_map found in hand
    #####: 1288:      return -1;
        -: 1289:    }
        -: 1290:	
    #####: 1291:  return -1;
        -: 1292:}
        -: 1293:
function discardCard called 24 returned 100% blocks executed 78%
       24: 1294:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1295:{
        -: 1296:	
        -: 1297:  //if card is not trashed, added to Played pile 
       24: 1298:  if (trashFlag < 1)
branch  0 taken 24 (fallthrough)
branch  1 taken 0
        -: 1299:    {
        -: 1300:      //add card to played pile
       24: 1301:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       24: 1302:      state->playedCardCount++;
        -: 1303:    }
        -: 1304:	
        -: 1305:  //set played card to -1
       24: 1306:  state->hand[currentPlayer][handPos] = -1;
        -: 1307:	
        -: 1308:  //remove card from player's hand
       24: 1309:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0 (fallthrough)
branch  1 taken 24
        -: 1310:    {
        -: 1311:      //reduce number of cards in hand
    #####: 1312:      state->handCount[currentPlayer]--;
        -: 1313:    }
       24: 1314:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 24
        -: 1315:    {
        -: 1316:      //reduce number of cards in hand
    #####: 1317:      state->handCount[currentPlayer]--;
        -: 1318:    }
        -: 1319:  else 	
        -: 1320:    {
        -: 1321:      //replace discarded card with last card in hand
       24: 1322:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1323:      //set last card to -1
       24: 1324:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1325:      //reduce number of cards in hand
       24: 1326:      state->handCount[currentPlayer]--;
        -: 1327:    }
        -: 1328:	
       24: 1329:  return 0;
        -: 1330:}
        -: 1331:
function gainCard called 8 returned 100% blocks executed 80%
        8: 1332:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1333:{
        -: 1334:  //Note: supplyPos is enum of choosen card
        -: 1335:	
        -: 1336:  //check if supply pile is empty (0) or card is not used in game (-1)
        8: 1337:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 8
branch  1 taken 4 (fallthrough)
branch  2 taken 4
        -: 1338:    {
        4: 1339:      return -1;
        -: 1340:    }
        -: 1341:	
        -: 1342:  //added card for [whoseTurn] current player:
        -: 1343:  // toFlag = 0 : add to discard
        -: 1344:  // toFlag = 1 : add to deck
        -: 1345:  // toFlag = 2 : add to hand
        -: 1346:
        4: 1347:  if (toFlag == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        -: 1348:    {
    #####: 1349:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1350:      state->deckCount[player]++;
        -: 1351:    }
        4: 1352:  else if (toFlag == 2)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        -: 1353:    {
        4: 1354:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        4: 1355:      state->handCount[player]++;
        -: 1356:    }
        -: 1357:  else
        -: 1358:    {
    #####: 1359:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1360:      state->discardCount[player]++;
        -: 1361:    }
        -: 1362:	
        -: 1363:  //decrease number in supply pile
        4: 1364:  state->supplyCount[supplyPos]--;
        -: 1365:	 
        4: 1366:  return 0;
        -: 1367:}
        -: 1368:
function updateCoins called 21 returned 100% blocks executed 100%
       21: 1369:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1370:{
        -: 1371:	int i;
        -: 1372:
        -: 1373:	//reset coin count
       21: 1374:	state->coins = 0;
        -: 1375:
        -: 1376:	//add coins for each Treasure card in player's hand
      102: 1377:	for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 81
branch  1 taken 21 (fallthrough)
        -: 1378:	{
       81: 1379:		if (state->hand[player][i] == copper)
branch  0 taken 64 (fallthrough)
branch  1 taken 17
        -: 1380:		{
       64: 1381:			state->coins += 1;
        -: 1382:		}
       17: 1383:		else if (state->hand[player][i] == silver)
branch  0 taken 4 (fallthrough)
branch  1 taken 13
        -: 1384:		{
        4: 1385:			state->coins += 2;
        -: 1386:		}
       13: 1387:		else if (state->hand[player][i] == gold)
branch  0 taken 4 (fallthrough)
branch  1 taken 9
        -: 1388:		{
        4: 1389:			state->coins += 3;
        -: 1390:		}	
        -: 1391:	}	
        -: 1392:
        -: 1393:	//add bonus
       21: 1394:	state->coins += bonus;
        -: 1395:	//printf("%d inside of function\n", state->coins);
        -: 1396:
       21: 1397:	return 0;
        -: 1398:}
        -: 1399:
function gameStateCmp called 30 returned 100% blocks executed 79%
       30: 1400:int gameStateCmp(struct gameState *G1, struct gameState *G2)
        -: 1401:{
        -: 1402:	// Locals 
        -: 1403:	int i, j;
        -: 1404:
        -: 1405:	// numPlayers 
       30: 1406:	if(G1 -> numPlayers != G2 -> numPlayers) 
branch  0 taken 0 (fallthrough)
branch  1 taken 30
    #####: 1407:		return -1;
        -: 1408:	
        -: 1409:	// supplyCount 
       30: 1410:	for(i = 0; i < treasure_map + 1; i++)
branch  0 taken 810
branch  1 taken 30 (fallthrough)
        -: 1411:		if(G1 -> supplyCount[i] != G1 -> supplyCount[i])
        -: 1412:			return -2;
        -: 1413:		
        -: 1414:	// embargoTokens
       30: 1415:	for(i = 0; i < treasure_map + 1; i++)
branch  0 taken 810
branch  1 taken 30 (fallthrough)
        -: 1416:		if(G1 -> embargoTokens[i] != G1 -> embargoTokens[i])
        -: 1417:			return -3;
        -: 1418:	
        -: 1419:	// outpostPlayed
       30: 1420:	if(G1 -> outpostPlayed != G2 -> outpostPlayed) 
branch  0 taken 0 (fallthrough)
branch  1 taken 30
    #####: 1421:		return -4;
        -: 1422:	
        -: 1423:	// outpostTurn
       30: 1424:	if(G1 -> outpostTurn != G2 -> outpostTurn) 
branch  0 taken 0 (fallthrough)
branch  1 taken 30
    #####: 1425:		return -5;
        -: 1426:	
        -: 1427:	// whoseTurn
       30: 1428:	if(G1 -> whoseTurn != G2 -> whoseTurn) 
branch  0 taken 0 (fallthrough)
branch  1 taken 30
    #####: 1429:		return -6;
        -: 1430:	
        -: 1431:	// phase
       30: 1432:	if(G1 -> phase != G2 -> phase) 
branch  0 taken 0 (fallthrough)
branch  1 taken 30
    #####: 1433:		return -7;
        -: 1434:	
        -: 1435:	// numActions
       30: 1436:	if(G1 -> numActions != G2 -> numActions) 
branch  0 taken 0 (fallthrough)
branch  1 taken 30
    #####: 1437:		return -8;
        -: 1438:	
        -: 1439:	// coins
       30: 1440:	if(G1 -> coins != G2 -> coins) 
branch  0 taken 0 (fallthrough)
branch  1 taken 30
    #####: 1441:		return -9;
        -: 1442:
        -: 1443:	// numBuys
       30: 1444:	if(G1 -> numBuys != G2 -> numBuys) 
branch  0 taken 0 (fallthrough)
branch  1 taken 30
    #####: 1445:		return -10;
        -: 1446:	
        -: 1447:	// handCount first before hand 
      144: 1448:	for(i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 117
branch  1 taken 27 (fallthrough)
      117: 1449:		if(G1 -> handCount[i] != G2 -> handCount[i])
branch  0 taken 3 (fallthrough)
branch  1 taken 114
        3: 1450:			return -11;
        -: 1451:	
        -: 1452:	// hand using correct handCount
      135: 1453:	for(i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 108
branch  1 taken 27 (fallthrough)
      623: 1454:		for(j = 0; j < G1 -> handCount[i]; j++)
branch  0 taken 515
branch  1 taken 108 (fallthrough)
      515: 1455:			if(G1 -> hand[i][j] != G2 -> hand[i][j])
branch  0 taken 0 (fallthrough)
branch  1 taken 515
    #####: 1456:				return -12;
        -: 1457:			
        -: 1458:	// deckCount first before hand 
      135: 1459:	for(i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 108
branch  1 taken 27 (fallthrough)
      108: 1460:		if(G1 -> deckCount[i] != G2 -> deckCount[i]) 
branch  0 taken 0 (fallthrough)
branch  1 taken 108
    #####: 1461:			return -13;
        -: 1462:	
        -: 1463:	// hand using correct deckCount
      135: 1464:	for(i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 108
branch  1 taken 27 (fallthrough)
     1843: 1465:		for(j = 0; j < G1 -> deckCount[i]; j++)
branch  0 taken 1735
branch  1 taken 108 (fallthrough)
     1735: 1466:			if(G1 -> deck[i][j] != G2 -> deck[i][j])
branch  0 taken 0 (fallthrough)
branch  1 taken 1735
    #####: 1467:				return -14;
        -: 1468:			
        -: 1469:	// discardCount first before hand 
      135: 1470:	for(i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 108
branch  1 taken 27 (fallthrough)
      108: 1471:		if(G1 -> discardCount[i] != G2 -> discardCount[i]) 
branch  0 taken 0 (fallthrough)
branch  1 taken 108
    #####: 1472:			return -15;
        -: 1473:	
        -: 1474:	// discard using correct deckCount
      135: 1475:	for(i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 108
branch  1 taken 27 (fallthrough)
     1373: 1476:		for(j = 0; j < G1 -> discardCount[i]; j++)
branch  0 taken 1265
branch  1 taken 108 (fallthrough)
     1265: 1477:			if(G1 -> discard[i][j] != G2 -> discard[i][j])
branch  0 taken 0 (fallthrough)
branch  1 taken 1265
    #####: 1478:				return -16;
        -: 1479:			
        -: 1480:	// playedCardCount first before hand 
       27: 1481:	if(G1 -> playedCardCount != G2 -> playedCardCount) 
branch  0 taken 0 (fallthrough)
branch  1 taken 27
    #####: 1482:		return -17;
        -: 1483:	
        -: 1484:	// discard using correct deckCount
      332: 1485:	for(j = 0; j < G1 -> playedCardCount; j++)
branch  0 taken 305
branch  1 taken 27 (fallthrough)
      305: 1486:		if(G1 -> playedCards[j] != G2 -> playedCards[j])
branch  0 taken 0 (fallthrough)
branch  1 taken 305
    #####: 1487:			return -18;
        -: 1488:			
       27: 1489:	return 1000;
        -: 1490:}
        -: 1491:
        -: 1492://end of dominion.c
        -: 1493:
